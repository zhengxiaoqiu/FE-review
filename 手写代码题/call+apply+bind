Function.prototype.myCall = function (context) {
    var context = context || window;
    context.fn = this;
    var arg = [];
    for (var i = 1; i < arguments.length; i++) {
        arg.push('arguments[' + i + ']');
    }
    var res = eval('context.fn('+ arg +')');
    delete context.fn;
    return res;
}


Function.prototype.myApply = function (context, arr) {
    var context = context || window;
    context.fn = this;
    var res;

    if (!arr || arr.length == 0) {
        res = context.fn();
    } else {
        var arg = [];
        for (var i = 0; i < arr.length; i++) {
            arg.push('arr[' + i + ']');
        }
        res = eval('context.fn(' + arg + ')');
    }
    delete context.fn;
    return res;
}


Function.prototype.myBind = function (context) {
    var self = this;
    var context = context || window;
    var args = [].slice.call(arguments, 1);
    var temp = function () {};
    temp.prototype = self.prototype;
    var fn = function () {
        var _args = [].slice.call(arguments, 1);
        return self.apply( this instanceof temp ? this : context, args.concat(_args));
    }
    fn.prototype = new temp();
    return fn;
}



